<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>区间</title>
    <url>/2021/07/08/%E7%AE%97%E6%B3%95%E6%8F%90%E9%AB%98%E8%AF%BE/%E7%AC%AC%E4%B8%89%E7%AB%A0---%E5%9B%BE%E8%AE%BA/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/%E5%8C%BA%E9%97%B4/</url>
    <content><![CDATA[<h1 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h1><hr>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://aifusen.oss-cn-shenzhen.aliyuncs.com/20210708211519.png" alt="image-20210708211519007"></p>
<hr>
<h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><ul>
<li>【1】给定区间<code>[a,b]</code>为$[3,7]$，那么$3\leq x\leq 7$，所以$x$的可选范围为{3，4，5，6，7}，其中要求选出来的$x$的个数必须不少于$c=3$个</li>
<li>【2】给定区间<code>[a,b]</code>为$[8,10]$，那么$8\leq x\leq 10$，所以$x$的可选范围为{8，9，10}，其中要求选出来的$x$的个数必须不少于$c=3$个</li>
<li>【3】给定区间<code>[a,b]</code>为$[6,8]$，那么$6\leq x\leq 8$，所以$x$的可选范围为{6，7，8}，其中要求选出来的$x$的个数必须不少于$c=1$个</li>
<li>【4】给定区间<code>[a,b]</code>为$[1,3]$，那么$1\leq x\leq 3$，所以$x$的可选范围为{1，2，3}，其中要求选出来的$x$的个数必须不少于$c=1$个</li>
<li>【5】给定区间<code>[a,b]</code>为$[10,11]$，那么$10\leq x\leq 11$，所以$x$的可选范围为{10，11}，其中要求选出来的$x$的个数必须不少于$c=1$个</li>
</ul>
<p>题目是意思是说想让我们从【1】、【2】、【3】、【4】、【5】中挑出$x$，组成一个整数集合$Z$，使得集合$Z$中元素的个数最少。那么给我们的启发就是，从【1】到【5】中跳出的这些数$x$应该尽可能的有交集，这样，才能使得选出最少的个数来组成集合$Z$。</p>
<ul>
<li>我们先看【1】和【4】，可以发现有交集元素3，由于【4】要求至少$c=1$，因此从【4】中我们挑出$x=3$就行了；</li>
<li>再来看【1】和【3】，可以发现有交集元素6，7，由于【1】中要求至少$c=3$，因此从【1】中挑选出$x=3,x=7,x=6,x=7$</li>
<li>再来看【2】和【3】，可以发现有交集元素8，由于【3】要求至少选出$c=1$，因此从【3】中我们挑出$x=8$</li>
<li>再来看【2】和【5】，有交集元素10，由于【5】要求至少选出$c=1$，因此从【5】中我们挑出$x=10$，由于【2】要求选出来的$x$的个数必须不少于$c=3$个，因此从【2】中挑出$x=8,9,10$</li>
<li>综上，我们选出来的$x$有<code>[3,6,7,8,9,10]</code>，也就是最少选出6个数，就可以构成一个整数集合$Z$，此时可以满足题目给出的五个限制条件</li>
</ul>
<hr>
<h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><p>这题我们需要用到差分约束来求解，同时还需要用到前缀和（这点比较难想）</p>
<p>我们设<code>S[i]</code>来表示从区间$[1,i]$中选出的$x$的个数。这里$0\leq a_i,b_i\leq 50000$，但是呢，由于前缀和需要用到$S[0]$，由定义可知$S[0]=0$，那么我们可以让$a_i,b_i$都+1，即向右平移一个单位，空出0这个位置来表达前缀和$S[0]$，平移之和并不影响最终结果。因此，此时$1\leq a_i,b_i\leq 50001$。</p>
<p>那么题目的意思也就是让我们从区间<code>[1,50001]</code>从选出最少的$x$的个数，来构成整数$Z$的集合。这道题肯定是会有解的，因为最坏情况下，我们把区间$[1,50001]$中的所有数都选择了，那么此时集合$Z$就有50001个元素，因此一定是有解的。那么这个解该怎么表示呢？由于我们不知道具体要选出多少个数，但是我们知道范围上限是50001，也就是$S[50001]$表示的是从区间$[1,50001]$中选出的$x$的最少的个数。因此，我们真正要求解的就是$S[50001]_{min}$</p>
<p>那么这题该怎么用差分约束呢？我们需要根据思路和题目描述自己来找出差分约束的条件：</p>
<ul>
<li>$S_i\geq S_{i-1}，1\leq i\leq 50001$，为什么呢？因为$S_i$表示从区间$[1,i]$中选出的$x$的个数，而$S_{i-1}$表示从区间$[1,i-1]$中选出的$x$的个数，因此$S_i$必定是要$\geq S_{i-1}$的，由定义出发就可以知道</li>
<li>$S_i-S_{i-1}\leq 1$，为什么呢？因为$S_i$表示从区间$[1,i]$中选出的$x$的个数，而$S_{i-1}$表示从区间$[1,i-1]$中选出的$x$的个数，那么$S_i-S_{i-1}$就表示第$i$个数，即整数$i$它被选的个数，由于整数$i$要么没有，如果有的话则最多只会有一个，因此由含义就可以知道选出来的第$i$个数，它被选的个数最多为1</li>
<li>由题目描述”区间$[a,b]$中最少要有$c$个数，可推知：$S_b-S_{a-1}\geq c$</li>
</ul>
<p>由于想要求的是变量$S[50001]$的最小值，运用差分约束，那么就需要跑最长路。将上面三个限制条件重新整理一下：</p>
<ul>
<li>$S_i\geq S_{i-1}+0$，那么就是从节点$S_{i-1}$向节点$S_i$连一条权值为0的边</li>
<li>$S_{i-1}\geq S_i-1$，那么就是从节点$S_{i}$向节点$S_{i-1}$连一条权值为-1的边</li>
<li>$S_b\geq S_{a-1}+c$，那么就是从节点$S_{a-1}$向节点$S_b$连一条权值为$c$的边</li>
</ul>
<p>但是呢，我们还需要思考一下，==从源点出发，是否一定可以走到所有的边==，这是差分约束正确性的前提条件。根据第一个约束条件可知，从$S_{i-1}$节点可以走到节点$S_i$，因此可以从$S_0$走到$S_1$，$S_1$走到$S_2$，$\cdots$，从$S_{50000}$走到$S_{50001}$，因此，从源点出发，是可以走到所有的边的</p>
<blockquote>
<p>问题：为什么这里的边数要开3倍呢？</p>
<p>由第一、二个约束条件可知，$S_{i-1}$和$S_{i}$之间都有边，即双向边，由第三个约束条件可知，则还会连出一条边，因此会有3条边。</p>
</blockquote>
<hr>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50010</span>,M=<span class="number">150010</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],w[M],idx;</span><br><span class="line"><span class="comment">//dist[i]表示从起点到节点i的最长距离</span></span><br><span class="line"><span class="keyword">int</span> dist[N];</span><br><span class="line"><span class="comment">//循环队列</span></span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"><span class="comment">//判断一个节点是否已经入队了</span></span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b;</span><br><span class="line">    w[idx]=c;</span><br><span class="line">    ne[idx]=h[a];</span><br><span class="line">    h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里一定有解，因此并不需要判断是否存在负环了</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//求最长路,则初始化为负无穷</span></span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">-0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    <span class="keyword">int</span> hh=<span class="number">0</span>,tt=<span class="number">1</span>;</span><br><span class="line">    dist[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    q[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    st[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(hh!=tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//取出队头元素</span></span><br><span class="line">        <span class="keyword">int</span> t=q[hh++];</span><br><span class="line">        <span class="comment">//循环队列满了</span></span><br><span class="line">        <span class="keyword">if</span>(hh==N)</span><br><span class="line">            hh=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//节点t出队</span></span><br><span class="line">        st[t]=<span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//遍历节点t的所有邻接点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=h[t];~i;i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j=e[i];<span class="comment">//t的邻接点编号j</span></span><br><span class="line">            <span class="keyword">if</span>(dist[j]&lt;dist[t]+w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//通过节点t来更新节点j到起到的最长距离</span></span><br><span class="line">                dist[j]=dist[t]+w[i];</span><br><span class="line">                <span class="comment">//如果节点j还没有入队</span></span><br><span class="line">                <span class="keyword">if</span>(!st[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[tt++]=j;<span class="comment">//节点j入队</span></span><br><span class="line">                    <span class="comment">//队尾指针走到了末尾,则重新回到队头</span></span><br><span class="line">                    <span class="keyword">if</span>(tt==N)</span><br><span class="line">                        tt=<span class="number">0</span>;</span><br><span class="line">                    <span class="comment">//标记节点j已经入队了</span></span><br><span class="line">                    st[j]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化表头为-1</span></span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//给第一、二个约束条件建图</span></span><br><span class="line">        <span class="built_in">add</span>(i<span class="number">-1</span>,i,<span class="number">0</span>);   </span><br><span class="line">        <span class="built_in">add</span>(i,i<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        <span class="comment">//记得向右平移一位</span></span><br><span class="line">        a++,b++;</span><br><span class="line">        <span class="built_in">add</span>(a<span class="number">-1</span>,b,c);   <span class="comment">//给第三个约束条件建图</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跑以便spfa求出每个节点到起点的最长路</span></span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">    <span class="comment">//dist[50001]表示节点S(50001)到起点的最长距离,也就是题目中想要求的最小值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dist[<span class="number">50001</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title>糖果</title>
    <url>/2021/07/08/%E7%AE%97%E6%B3%95%E6%8F%90%E9%AB%98%E8%AF%BE/%E7%AC%AC%E4%B8%89%E7%AB%A0---%E5%9B%BE%E8%AE%BA/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/%E7%B3%96%E6%9E%9C/</url>
    <content><![CDATA[<h1 id="糖果"><a href="#糖果" class="headerlink" title="糖果"></a>糖果</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://gitee.com/linmacos/blog-image/raw/master/img/20210709195011.png" alt="image-20210709195011238"></p>
<hr>
<h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><p>从题目描述中可知，这道题主要是要运用差分约束来求解。求至少需要准备多少个糖果，也就是求变量$a_i$的最小值，那么也就是需要跑最长路。</p>
<ul>
<li>根据题目描述如果$X=1$，则$A=B$，即有$\begin{cases}A\geq B+0\ B\geq A+0 \end{cases}$      因此需要从节点$B$向节点$A$连一条权值为0的边，从节点$A$向节点$B$连一条权值为0的边</li>
<li>根据题目描述如果$X=2$，则$B\geq A+1$，因此从节点$A$向节点$B$连一条权值为1的边</li>
<li>根据题目描述如果$X=3$，则$A\geq B+0$，因此从节点$B$向节点$A$连一条权值为0的边</li>
<li>根据题目描述如果$X=4$，则$A\geq B+1$，因此从节点$B$向节点$A$连一条权值为1的边</li>
<li>根据题目描述如果$X=5$，则$B\geq A+0$，因此从节点$A$向节点$B$连一条权值为0的边</li>
<li>同时，由题干”要求每个小朋友都要分到苹果“，因此可以知道$a_i&gt;0$，即$a_i\geq 1$，那么可以添加一个超级源点$a_0$，$a_0$为0。那么$a_i+a_0\geq a_0+1$，即$a_i\geq a_0+1$，因此从超级源点$a_0$向节点$a_i$连一条权值为1的边</li>
</ul>
<blockquote>
<p>问题：这里为什么是用栈而不是用循环队列呢？</p>
<p>对于spfa判负环，一般是对STL中的queue或者是手写循环队列。但是这一题比较玄学，用栈竟然是一种优化…</p>
<p>因为队列下标是递增的，进队次数可能会很多，所以访问到的下标可能很大。但栈不管插入多少次，最多只会用前n个位置。</p>
<p>这个优化不太稳定，比较玄学。优化大致上基于如下想法：如果存在一个环，那么用栈来搜索时，会按照深度优先的顺序，那么很快就会沿着环找到起点。</p>
</blockquote>
<hr>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//这里的边的数目要开3倍,是因为比如点A-&gt;点B,点B-&gt;点A,同时还有超级源点0-&gt;点B</span></span><br><span class="line"><span class="comment">//因此对于点B来说,就有3条边</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],w[M],idx;</span><br><span class="line"><span class="comment">//注意数据范围可能会爆int</span></span><br><span class="line">LL dist[N];</span><br><span class="line"><span class="comment">//数组模拟栈,用来存储spfa算法中入栈的节点</span></span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"><span class="comment">//用来记录从起点到某个点所经过的边的个数</span></span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"><span class="comment">//判断某个点是否入栈</span></span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b;</span><br><span class="line">    w[idx]=c;</span><br><span class="line">    ne[idx]=h[a];</span><br><span class="line">    h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//spfa判负环</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hh=<span class="number">0</span>,tt=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//最长路,因此需要设置为负无穷大</span></span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">-0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    <span class="comment">//超级源点到自身距离为0</span></span><br><span class="line">    dist[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//超级源点0号节点入栈</span></span><br><span class="line">    q[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//标记超级源点0号节点入栈</span></span><br><span class="line">    st[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(hh!=tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//取出栈顶元素</span></span><br><span class="line">        <span class="keyword">int</span> t=q[--tt];</span><br><span class="line">        <span class="comment">//标记栈顶元素这个节点已经出栈</span></span><br><span class="line">        st[t]=<span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//遍历栈顶元素t的所有邻接点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=h[t];~i;i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j=e[i];<span class="comment">//取出邻接节点j</span></span><br><span class="line">            <span class="comment">//最长路的松弛条件：dist[j]&lt;dist[t]+w[i]</span></span><br><span class="line">            <span class="keyword">if</span>(dist[j]&lt;dist[t]+w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//更新节点j的最短距离</span></span><br><span class="line">                dist[j]=dist[t]+w[i];</span><br><span class="line">                <span class="comment">//从起点到节点j经过了cnt[t]+1条边</span></span><br><span class="line">                cnt[j]=cnt[t]+<span class="number">1</span>;</span><br><span class="line">                <span class="comment">//由于我们建立的图中有超级源点0号节点+n个点=n+1个节点</span></span><br><span class="line">                <span class="comment">//但是如果但cnt[j]&gt;=n+1时,即从起点到节点j经过了n+1条边,则说明有(n+1)+1=n+2个节点</span></span><br><span class="line">                <span class="comment">//这与图中的n+1个节点相矛盾,因此由抽屉原理,知必存在负环</span></span><br><span class="line">                <span class="keyword">if</span>(cnt[j]&gt;=n+<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">//如果j这个节点还没有入栈</span></span><br><span class="line">                <span class="keyword">if</span>(!st[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[tt++]=j;<span class="comment">//将节点j入栈</span></span><br><span class="line">                    st[j]=<span class="literal">true</span>;<span class="comment">//标记节点j已经入栈了</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则,说明不存在负环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//表头初始化为-1</span></span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(b,a,<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">add</span>(a,b,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">add</span>(a,b,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">3</span>)</span><br><span class="line">            <span class="built_in">add</span>(b,a,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">4</span>)</span><br><span class="line">            <span class="built_in">add</span>(b,a,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">add</span>(a,b,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//由于我们添加了超级源点0,因此从0号节点到其他的各个节点i都要建一条边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">add</span>(<span class="number">0</span>,i,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//存在负环,则差分约束系统无解</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">spfa</span>())</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="comment">//不存在负环,则差分约束系统有解</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        LL res=<span class="number">0</span>;   <span class="comment">//记录最终答案</span></span><br><span class="line">        <span class="comment">//dist[i]表示从超级源点到节点i的最长路,也就是题目中每个小朋友应该在限制要求下分得的糖果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            res+=dist[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>差分约束</tag>
      </tags>
  </entry>
</search>
